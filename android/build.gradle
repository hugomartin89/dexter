apply plugin: "com.android.application"

configurations {
    natives
}

dependencies {
    compile project(":core")
    compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
}

android {
    buildToolsVersion project.androidToolsVersion
    compileSdkVersion project.androidSdkVersion.toInteger()

    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            java.srcDirs = ["src"]
            aidl.srcDirs = ["src"]
            renderscript.srcDirs = ["src"]
            res.srcDirs = ["res"]
            assets.srcDirs = ["../core/assets"]
            jniLibs.srcDirs = ["libs"]
        }

        instrumentTest.setRoot("tests")
    }
}

task copyAndroidNatives() {
    copy {
        from("cfg/AndroidManifest.xml") {
            filter { line ->
                line.replaceAll(/PACKAGE/, packageName);
            }
            filter { line ->
                line.replaceAll(/ANDROID_VERSION_CODE/, androidVersionCode);
            }
            filter { line ->
                line.replaceAll(/ANDROID_VERSION_NAME/, version);
            }
            filter { line ->
                line.replaceAll(/ANDROID_SDK_VERSION/, androidSdkVersion);
            }
        }

        into("./")
    }

    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null

        if(jar.name.endsWith("natives-armeabi-v7a.jar")) {
            outputDir = file("libs/armeabi-v7a")
        }

        if(jar.name.endsWith("natives-armeabi.jar")) {
             outputDir = file("libs/armeabi")
        }

        if(jar.name.endsWith("natives-x86.jar")) {
            outputDir = file("libs/x86")
        }

        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path = "$System.env.ANDROID_HOME"

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", "shell", "am", "start", "-n", packageName + ".android/.AndroidLauncher"
}
